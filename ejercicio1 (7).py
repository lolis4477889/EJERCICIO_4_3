# -*- coding: utf-8 -*-
"""EJERCICIO1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aXfUxAI0vw9lF_IejhsNsUTYMd-lkzqw
"""

import numpy as np
import matplotlib.pyplot as plt

def simpson_rule(f, a, b, n):
    """Aproxima la integral de f(x) en [a, b] usando la regla de Simpson."""
    if n % 2 == 1:
        raise ValueError("El número de subintervalos (n) debe ser par.")

    h = (b - a) / n
    x = np.linspace(a, b, n + 1)  # Puntos del intervalo
    fx = f(x)  # Evaluamos la función en esos puntos

    # Regla de Simpson
    integral = (h / 3) * (fx[0] + 2 * np.sum(fx[2:n:2]) + 4 * np.sum(fx[1:n:2]) + fx[n])

    return integral

# Parámetros del problema
k = 200  # Constante del resorte (N/m)
a, b = 0.1, 0.3  # Límites de integración

def fuerza_resorte(x):
    return k * x  # Función de la fuerza elástica

# Solución analítica
solucion_analitica = 0.5 * k * (b**2 - a**2)

# Evaluamos la integral con diferentes valores de n
n_values = [6, 10, 20, 30]
aproximaciones = []
errores = []

for n in n_values:
    resultado = simpson_rule(fuerza_resorte, a, b, n)
    aproximaciones.append(resultado)
    error = abs(solucion_analitica - resultado)
    errores.append(error)
    print(f"Para n = {n}, Integral aproximada = {resultado:.6f}, Error absoluto = {error:.6f}")

# Gráfica del error
plt.figure()
plt.plot(n_values, errores, marker='o', linestyle='-', color='red', label='Error absoluto')
plt.xlabel('Número de subintervalos (n)')
plt.ylabel('Error absoluto')
plt.title('Error en la aproximación con la regla de Simpson')
plt.grid()
plt.legend()
plt.savefig("error_simpson.png")
plt.show()